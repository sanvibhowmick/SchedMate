import subprocess
import os
import platform

def run_fet_cli(input_file: str, output_dir: str) -> bool:
    """
    Executes the FET command-line interface as an external process
    using Python's subprocess module. This function is the core integration
    point with the FET engine.

    Args:
        input_file: The full path to the .fet input file generated by json_to_fet.py.
        output_dir: The directory where FET should save the generated timetable files.

    Returns:
        True if the FET process completes successfully (with an exit code of 0).
        False if any error occurs (e.g., command not found, scheduling failure).
    """
    # Pre-flight check: Ensure the input file actually exists before trying to run FET.
    if not os.path.exists(input_file):
        print(f"CRITICAL ERROR: FET input file not found at path: {input_file}")
        return False
    
    # Ensure the target output directory exists.
    os.makedirs(output_dir, exist_ok=True)
    
    # Determine the correct executable name based on the operating system.
    # This makes the script cross-platform.
    command_name = "fet-cl.exe" if platform.system() == "Windows" else "fet-cl"
    
    # Construct the full command as a list of arguments.
    # This is the safest way to pass arguments to subprocess.
    command = [
        command_name,
        f"--inputfile={input_file}",
        f"--outputdir={output_dir}",
        "--timelimitseconds=60",  # A crucial safety net to prevent the process from running indefinitely.
    ]
    
    print(f"Executing FET command: {' '.join(command)}")
    
    try:
        # The core of the function: run the external command.
        result = subprocess.run(
            command,
            check=True,          # Raise an exception if FET returns a non-zero (error) exit code.
            capture_output=True, # Capture the console output (stdout) and errors (stderr).
            text=True,           # Decode the output streams as text.
            encoding='utf-8',
            errors='ignore'      # Safely ignore potential decoding errors in FET's console output.
        )
        # If we reach here, 'check=True' ensures the process was successful.
        print("FET process completed successfully.")
        print("--- FET Console Output ---")
        print(result.stdout)
        print("------------------------")
        return True
        
    except FileNotFoundError:
        # This is a common and critical error. It means 'fet-cl' is not installed or not in the PATH.
        print(f"FATAL ERROR: The command '{command_name}' was not found.")
        print("Please ensure the FET Command-Line Interface is installed and that the directory containing it is in your system's PATH environment variable.")
        return False
        
    except subprocess.CalledProcessError as e:
        # This error means FET ran but exited with an error code,
        # most likely because the timetable constraints were impossible to solve.
        print("ERROR: FET execution failed. This usually means the constraints are too restrictive.")
        print(f"Return Code: {e.returncode}")
        print(f"--- FET STDOUT --- \n{e.stdout}")
        print(f"--- FET STDERR --- \n{e.stderr}")
        return False

